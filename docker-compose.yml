version: "3.8"

services:

  #Nginx webserver
  webserver:
    container_name: flag_webserver
    tty: true
    restart: unless-stopped
    build:
      context: ./
      dockerfile: .docker/nginx/Dockerfile
    ports:
      - "80:80"
    volumes:
      - .:/var/www
      - .docker/nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network

  # PHP service
  app:
    container_name: flag_app
    tty: true
    restart: unless-stopped
    build:
      context: ./
      dockerfile: .docker/php/Dockerfile
    working_dir: /var/www
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - .:/var/www
      - .docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    environment:
      XDEBUG_SESSION: 1
      XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
      XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
      PHP_IDE_CONFIG: 'serverName=laravel'
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: "1024M"
        reservations:
          memory: "1024M"

  horizon:
    container_name: flag_horizon
    build:
      context: ./
      dockerfile: .docker/php/Dockerfile
    working_dir: /var/www
    command: php artisan horizon
    volumes:
      - .:/var/www
    networks:
      - app-network
    depends_on:
      - app

  # DB service (MySQL)
  db:
    container_name: flag_db
    #platform: linux/x86_64 uncomment for MacBook M1
    build:
      context: ./
      dockerfile: .docker/mysql/Dockerfile
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
      MYSQL_TCP_PORT: '${DB_PORT}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - .docker/mysql/my.cnf:/etc/mysql/my.cnf
      - .docker/data/mysql/mysql-data:/var/lib/mysql/
      - .docker/data/mysql/mysql-files:/var/lib/mysql-files
      #- ./dump2.sql:/dump.sql
    networks:
      - app-network

  redis:
    container_name: flag_redis
    image: 'redis:alpine'
    ports:
      - '6379:6379'
    volumes:
      - 'flag_redis_data:/data'
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      retries: 3
      timeout: 5s

  meilisearch:
    container_name: flag_meilisearch
    image: 'getmeili/meilisearch:latest'
    dns:
      - 8.8.8.8
    ports:
      - "7700:7700"
    environment:
      - MEILI_MASTER_KEY=${MEILISEARCH_KEY:-ms}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7700" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  swagger:
    container_name: flag_swagger
    image: swaggerapi/swagger-ui
    ports:
      - "8080:8080"
    volumes:
      - ./swagger/documentation.json:/documentation.json
    environment:
      SWAGGER_JSON: /documentation.json

#Docker networks
networks:
  app-network:
    driver: bridge

#Volumes
volumes:
  flag_redis_data:
    driver: local